#summary Creating First Test Project.

=Creating your First Test=

==Prerequisites==
  * *Install Java SE Development Kit 7*
  * *Install Eclipse IDE for Java Developers*
  * *Install TestNG plug-in for Eclipse*

===Create new Maven Project===
In Eclipse create new maven project and add page-component and selenium-java as Maven dependency<br>
 
Here is an example pom file with the dependencies for page-component project and for selenium webdriver project:

{{{
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>page-component</groupId>
	<artifactId>example</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>example</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>com.googlecode.page-component</groupId>
			<artifactId>page-component</artifactId>
			<version>1.0.5</version>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.39.0</version>
		</dependency>
	</dependencies>

</project>
}}}

===Project File Structure===
{{{
--example
     |___ src
           |___ main
           |     |___ java
           |
           |
           |____ test
                  |___ java
                  |___ resources


}}}

page-component test project consist of several artifacts, each artifact should be stored under specific folder:
  * *src/main/java* folder is used to store page-object classes and various helper classes
  * *src/test/java* folder is used to store TestNG tests
  * *src/test/resources* folder is used to store Data-Sets

===Creating Page Object===
For application under the test we will use simple Google form located at http://goo.gl/gUqDHg <br>

Under the folder *src/main/java* create package _pageobjects_ and add new !FormPageObject class to the just created package. This class represents page-object for the web form we intend to test. All page objects should extend !PageObject class and have !WebElement, !WebComponent or any other classes which are extended from !PageComponent as class member of this page-object class. These class members of page-object should be annotated with selenium @!FindBy annotations for location strategy. 
Here is content of !FormPageObject:
{{{
package pageobjects;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import ui.auto.core.components.CheckBox;
import ui.auto.core.components.SelectComponent;
import ui.auto.core.components.WebComponent;
import ui.auto.core.pagecomponent.PageObject;

public class FormPageObject extends PageObject{
        @FindBy(id="entry_311820602")
        WebComponent firstName;
        @FindBy(id="entry_1396008427")
        WebComponent lastName;
        @FindBy(id="entry_1447188970")
        WebComponent address;
	@FindBy(id="entry_1453012221")
	WebComponent emailAddress;
        @FindBy(id="entry_1264472189")
        SelectComponent eyeColor;
        @FindBy(id="group_1262363679_1")
        CheckBox facebook;
        @FindBy(id="group_1262363679_2")
        CheckBox twitter;
        @FindBy(id="group_1262363679_3")
        CheckBox linkedin;
        @FindBy(id="group_1262363679_4")
        CheckBox email;
        @FindBy(id="ss-submit")
        WebElement submitButton;
        
        public void fillForm(){
                autoFillPage();
                submitButton.click();
                waitForUrlToChange();
        }
        
        public static void main(String[] args) throws Exception{
        	FormPageObject form=new FormPageObject();
        	System.out.println(form.generateXML());
        }

}
}}}
===!PageObject autoFillPage() method===
In our page-object example we created method fillForm() this method should populate our example web form with provided data.
The first call in this method is autoFillPage() this method belongs to !PageObject class and it automatically populates all page-object fields which are extended from !PageComponent class with provided data. The order of data population is the order in which fields are listed in the page-object class. In case there is some logic involved in web page population, each class member of page-object can be populated individually. Page-objects are fully abstracted from the data so there is no explicit data visible in the page-object code. In the next topic I'll explain how to provide data to the page object.

===Data-Set template generation===
Data delivery mechanism used in page-component project is page-object serialization and deserialization to and from XML file. This type of XML file is called Data-Set. There is an ability to generate Data-Set template from the existing page-object, to do so we need to invoke method generateXML() from the extended !PaageObject class. The easiest way to invoke this method is to create main method. In our !FormPageObject class we created main method and now we can execute this class as java application. After the execution, XML Data-Set template will be generated and written to the console.<br>
Here is a generated Data-Set after execution of !FormPageObject class:     
{{{
<?xml version="1.0" encoding="UTF-8"?>

<pageobjects.FormPageObject>
  <firstName>firstName</firstName>
  <lastName>lastName</lastName>
  <address>address</address>
  <emailAddress>emailAddress</emailAddress>
  <eyeColor>eyeColor</eyeColor>
  <facebook>facebook</facebook>
  <twitter>twitter</twitter>
  <linkedin>linkedin</linkedin>
  <email>email</email>
</pageobjects.FormPageObject>
}}}

===Creating Specific Data-Set===
To create concrete Data-Set we should create empty !FormDataSet.xml file under the *src/test/resources* folder copy and paste generated template and modify it to include specific data.<br>
Here is an example of modified template:
{{{
<?xml version="1.0" encoding="UTF-8"?>

<pageobjects.FormPageObject>
  <firstName>Michael</firstName>
  <lastName>Smith</lastName>
  <address>123 Yonge Str., Toronto, ON., Canada</address>
  <emailAddress>Michael.Smith@gmail.com</emailAddress>
  <eyeColor>Green</eyeColor>
  <facebook>true</facebook>
  <twitter>false</twitter>
  <linkedin>false</linkedin>
  <email>true</email>
</pageobjects.FormPageObject>
}}}  

===Creating Test===
Now all we have to do is to write a test. Create package webform.test  and !TestForm class under the *src/test/java* folder and fill it with the following code:
{{{
package webform.test;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import ui.auto.core.context.PageComponentContext;
import ui.auto.core.data.DataPersistence;

public class WebFormTest {
    PageComponentContext context;
    
    @BeforeTest
    public void init(){
            WebDriver driver=new FirefoxDriver();
            context=new PageComponentContext(driver);
            driver.get("http://goo.gl/gUqDHg");
    }
    
    @Test
    public void fillForm(){
            FormPageObject formPageObject=DataPersistence.fromResource("FormDataSet.xml", FormPageObject.class);
            formPageObject.initPage(context);
            formPageObject.fillForm();
    }
    
    @AfterTest
    public void end(){
           context.getDriver().quit();
    }
}
}}} 

Now run this file as !TestNg test ans watch how this test is executed.

===Using Data-Set===
To deserialize XML Data-Set file to page-object we have to call static method fromFile() of the !DataPersistence class this method will create !FormPageObject with all members of this class initialized with data. After page-object creation this page-object should be initialized with !PageComponentContext this is done by invoking method initPage(context).

*Continue to RunningTestWithDynamicData page to see how you can run this test with random generated data*  